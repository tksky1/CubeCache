// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: protobuf/cluster.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GetValue_Get_FullMethodName = "/GetValue/Get"
)

// GetValueClient is the client API for GetValue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetValueClient interface {
	Get(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error)
}

type getValueClient struct {
	cc grpc.ClientConnInterface
}

func NewGetValueClient(cc grpc.ClientConnInterface) GetValueClient {
	return &getValueClient{cc}
}

func (c *getValueClient) Get(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error) {
	out := new(GetValueResponse)
	err := c.cc.Invoke(ctx, GetValue_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetValueServer is the server API for GetValue service.
// All implementations should embed UnimplementedGetValueServer
// for forward compatibility
type GetValueServer interface {
	Get(context.Context, *GetValueRequest) (*GetValueResponse, error)
}

// UnimplementedGetValueServer should be embedded to have forward compatible implementations.
type UnimplementedGetValueServer struct {
}

func (UnimplementedGetValueServer) Get(context.Context, *GetValueRequest) (*GetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeGetValueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetValueServer will
// result in compilation errors.
type UnsafeGetValueServer interface {
	mustEmbedUnimplementedGetValueServer()
}

func RegisterGetValueServer(s grpc.ServiceRegistrar, srv GetValueServer) {
	s.RegisterService(&GetValue_ServiceDesc, srv)
}

func _GetValue_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetValueServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetValue_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetValueServer).Get(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetValue_ServiceDesc is the grpc.ServiceDesc for GetValue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetValue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GetValue",
	HandlerType: (*GetValueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetValue_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/cluster.proto",
}

const (
	CreateCube_CreateCube_FullMethodName = "/CreateCube/CreateCube"
)

// CreateCubeClient is the client API for CreateCube service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateCubeClient interface {
	CreateCube(ctx context.Context, in *CreateCubeRequest, opts ...grpc.CallOption) (*CreateCubeResponse, error)
}

type createCubeClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateCubeClient(cc grpc.ClientConnInterface) CreateCubeClient {
	return &createCubeClient{cc}
}

func (c *createCubeClient) CreateCube(ctx context.Context, in *CreateCubeRequest, opts ...grpc.CallOption) (*CreateCubeResponse, error) {
	out := new(CreateCubeResponse)
	err := c.cc.Invoke(ctx, CreateCube_CreateCube_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateCubeServer is the server API for CreateCube service.
// All implementations should embed UnimplementedCreateCubeServer
// for forward compatibility
type CreateCubeServer interface {
	CreateCube(context.Context, *CreateCubeRequest) (*CreateCubeResponse, error)
}

// UnimplementedCreateCubeServer should be embedded to have forward compatible implementations.
type UnimplementedCreateCubeServer struct {
}

func (UnimplementedCreateCubeServer) CreateCube(context.Context, *CreateCubeRequest) (*CreateCubeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCube not implemented")
}

// UnsafeCreateCubeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateCubeServer will
// result in compilation errors.
type UnsafeCreateCubeServer interface {
	mustEmbedUnimplementedCreateCubeServer()
}

func RegisterCreateCubeServer(s grpc.ServiceRegistrar, srv CreateCubeServer) {
	s.RegisterService(&CreateCube_ServiceDesc, srv)
}

func _CreateCube_CreateCube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCubeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateCubeServer).CreateCube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateCube_CreateCube_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateCubeServer).CreateCube(ctx, req.(*CreateCubeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateCube_ServiceDesc is the grpc.ServiceDesc for CreateCube service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateCube_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CreateCube",
	HandlerType: (*CreateCubeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCube",
			Handler:    _CreateCube_CreateCube_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/cluster.proto",
}
